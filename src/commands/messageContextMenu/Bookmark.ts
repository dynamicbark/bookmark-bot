import { APIMessageApplicationCommandInteraction, ApplicationCommandType, MessageFlags } from '@discordjs/core';
import { discordClient, prisma } from '../../index.js';
import {
  ApplicationCommand,
  ApplicationCommandContextType,
  ApplicationIntegrationTypes,
  getUserFromInteraction,
} from '../../utils/CommandUtils.js';
import { upsertMessage, upsertTag, upsertUser } from '../../utils/DatabaseUtils.js';

export const bookmarkMessageContextMenuData: ApplicationCommand = {
  name: 'Bookmark',
  type: ApplicationCommandType.Message,
  integration_types: [ApplicationIntegrationTypes.UserInstall],
  contexts: [ApplicationCommandContextType.BotDM, ApplicationCommandContextType.Guild, ApplicationCommandContextType.PrivateChannel],
};

export async function bookmarkMessageContextMenu(interaction: APIMessageApplicationCommandInteraction) {
  // Defer the reply since it can take some time to process
  await discordClient.api.interactions.defer(interaction.id, interaction.token, {
    flags: MessageFlags.Ephemeral,
  });
  const user = getUserFromInteraction(interaction);
  const messageIds = Object.keys(interaction.data.resolved.messages);
  if (messageIds.length < 1) {
    console.error('resolved message was not found');
    return;
  }
  const resolvedMessage = interaction.data.resolved.messages[messageIds[0]];
  // Upsert the message author
  await upsertUser(
    resolvedMessage.author.id,
    resolvedMessage.author.username,
    resolvedMessage.author.global_name,
    resolvedMessage.author.avatar,
  );
  // Upsert the message
  await upsertMessage({
    ...resolvedMessage,
    guild_id: interaction.guild_id || null,
  });
  // Check if it has been bookmarked already by the user
  const foundBookmark = await prisma.bookmark.findFirst({
    where: {
      userId: BigInt(user.id),
      messageId: BigInt(resolvedMessage.id),
    },
  });
  if (foundBookmark) {
    await discordClient.api.interactions.editReply(interaction.application_id, interaction.token, {
      content: 'You have already bookmarked this message.',
      flags: MessageFlags.Ephemeral,
    });
    return;
  }
  // Upsert the autogenerated tags
  const channelTag = await upsertTag(user.id, `channel:${resolvedMessage.channel_id}`, true);
  const authorTag = await upsertTag(user.id, `author:${resolvedMessage.author.id}`, true);
  // Determine the new bookmark id
  const newId =
    ((
      await prisma.user.findFirst({
        where: {
          id: BigInt(user.id),
        },
      })
    )?.currentBookmarkId || 0) + 1;
  // Update the current bookmark id increment
  await prisma.user.update({
    where: {
      id: BigInt(user.id),
    },
    data: {
      currentBookmarkId: newId,
    },
  });
  // Create the bookmark
  await prisma.bookmark.create({
    data: {
      userId: BigInt(user.id),
      messageId: BigInt(resolvedMessage.id),
      userBookmarkId: newId,
      tags: {
        connect: [channelTag, authorTag],
      },
    },
  });
  await discordClient.api.interactions.editReply(interaction.application_id, interaction.token, {
    content: `The message has been bookmarked! (#${newId})`,
    flags: MessageFlags.Ephemeral,
  });
}
