import { APIMessage } from '@discordjs/core';
import { Bookmark, Message, Tag } from '@prisma/client';
import { prisma } from '../index.js';

export async function upsertUser(id: string | bigint, username: string, displayName?: string | null, avatarHash?: string | null) {
  await prisma.user.upsert({
    where: {
      id: BigInt(id),
    },
    create: {
      id: BigInt(id),
      username: username,
      displayName: displayName,
      avatarHash: avatarHash,
    },
    update: {
      username: username,
      displayName: displayName,
      avatarHash: avatarHash,
    },
  });
}

export async function upsertMessage(
  message: Partial<APIMessage> & {
    id: string;
    guild_id: string | null;
  },
) {
  const authorId = message.author!.id;
  // delete the un-needed properties
  delete message.author;
  delete message.tts;
  delete message.mention_everyone;
  delete message.mentions;
  delete message.mention_roles;
  delete message.mention_channels;
  delete message.reactions;
  delete message.nonce;
  delete message.pinned;
  delete message.activity;
  delete message.application;
  delete message.referenced_message;
  delete message.interaction;
  delete message.thread;
  delete message.components;
  delete message.stickers;
  delete message.position;
  delete message.role_subscription_data;
  delete message.resolved;
  // upsert the database
  await prisma.message.upsert({
    where: {
      id: BigInt(message.id),
    },
    create: {
      id: BigInt(message.id),
      authorId: BigInt(authorId),
      data: JSON.stringify(message),
    },
    update: {
      data: JSON.stringify(message),
    },
  });
}

export async function upsertTag(userId: string, name: string, autogenerated: boolean): Promise<Tag> {
  return await prisma.tag.upsert({
    where: {
      userId_name: {
        userId: BigInt(userId),
        name,
      },
    },
    create: {
      name,
      userId: BigInt(userId),
      autogenerated,
    },
    update: {},
  });
}

export async function resolveBookmarkForUser(
  userId: string,
  bookmarkIdOrName: string,
): Promise<
  | (Bookmark & {
      tags: Tag[];
      message: Message;
    })
  | null
> {
  if (!bookmarkIdOrName.match(/^[0-9]+$/g)) {
    return await prisma.bookmark.findFirst({
      where: {
        userId: BigInt(userId),
        alias: bookmarkIdOrName.toLowerCase(),
      },
      include: {
        tags: true,
        message: true,
      },
    });
  } else {
    return await prisma.bookmark.findFirst({
      where: {
        userId: BigInt(userId),
        userBookmarkId: parseInt(bookmarkIdOrName),
      },
      include: {
        tags: true,
        message: true,
      },
    });
  }
}
